negh <- c(3, 60, 3000)
for(k in seq_along(negh)) {
fitted_knn <-
nearest_neighbor(neighbors = negh[k]) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
fit(Churn ~ ., data = telco)
predictions <-
predictions %>%
mutate(pred_prob_knn = predict(fitted_knn,
new_data = newdata,
type = "prob")$.pred_Yes)
knn_plots[[k]] <-
scatter +
geom_contour_filled(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_knn),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1)) +
scale_fill_manual(values = pred_color,
name="Predicted probability",
drop = FALSE) +
guides(fill = FALSE) +
geom_contour(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_knn),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1),
colour = "black",
size = 1.5)+
ggtitle(paste("k =", negh[k]))
}
for(k in seq_along(negh)) {
fitted_knn <-
nearest_neighbor(neighbors = negh[k]) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
fit(Churn ~ ., data = telco)
predictions <-
predictions %>%
mutate(pred_prob_knn = predict(fitted_knn,
new_data = newdata,
type = "prob")$.pred_Yes)
knn_plots[[k]] <-
scatter +
geom_contour_filled(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_knn),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1)) +
scale_fill_manual(values = pred_color,
name="Predicted probability",
drop = FALSE) +
guides(fill = FALSE) +
geom_contour(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_knn),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1),
colour = "black",
size = 1.5)+
ggtitle(paste("k =", negh[k]))
}
library(patchwork)
knn_plots[[1]] + knn_plots[[2]] + knn_plots[[3]] + plot_layout(guides = "collect" ) & theme(legend.position = 'bottom')
library(dplyr)
library(ggplot2)
library(tidymodels)      # <- This is new. Tidyverse take on modeling
no_color <- "#00000020"
yes_color <- "#FF000070"
pred_color <- c("#FFFFFF00", "#AA3333DD")
cutoff <- .5
grid_resolution <- 50
# Read the data
telco <-
readr::read_csv("telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv") %>%
select(Churn, MonthlyCharges, tenure) %>%
mutate(Churn = as.factor(Churn))
# Make a basic scatterplot
scatter <-
telco %>%
ggplot(aes(x = MonthlyCharges, y = tenure, colour = Churn)) +
geom_point() +
xlab("Monthly charges ($)") +
ylab("Tenure (months)") +
scale_color_manual(values=c(no_color, yes_color)) +
theme_classic()
scatter
fitted_logistic <-
logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Churn ~ ., data = telco)
# Look at the results
tidy(fitted_logistic)
# Draw the decision boundary for logistic regression:
newdata <-
expand.grid(MonthlyCharges = seq(from = 20,
to = 120,
length.out = grid_resolution),
tenure = seq(from = 0,
to = 80,
length.out = grid_resolution))
predictions <-
newdata %>%
bind_cols(pred_prob_logistic = predict(fitted_logistic,
new_data = newdata,
type = "prob")$.pred_Yes)
scatter +
geom_contour_filled(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_logistic),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1)) +
scale_fill_manual(values = pred_color,
name="Predicted probability",
drop = FALSE) +
geom_contour(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_logistic),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1),
colour = "black",
size = 1.5)
fitted_knn <-
nearest_neighbor(neighbors = 50) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
fit(Churn ~ ., data = telco)
predictions <-
predictions %>%
mutate(pred_prob_knn = predict(fitted_knn,
new_data = newdata,
type = "prob")$.pred_Yes)
scatter +
geom_contour_filled(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_knn),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1)) +
scale_fill_manual(values = pred_color,
name="Predicted probability",
drop = FALSE)
scatter +
geom_contour_filled(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_knn),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1)) +
scale_fill_manual(values = pred_color,
name="Predicted probability",
drop = FALSE) +
geom_contour(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_knn),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1),
colour = "black",
size = 1.5)
# Specify the model
knn_mod <-
nearest_neighbor(neighbors =  = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
# Specify the model
knn_mod <-
nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn")
# Set up the workflow
knn_workflow <-
workflow() %>%
add_model(knn_mod)
# Make a search grid for the k-parameter
elastic_grid <- grid_latin_hypercube(
neighbours(),
size = 100
)
# Make a search grid for the k-parameter
knn_grid <- grid_latin_hypercube(
neighbors(),
size = 100
)
knn_grid
?grid_latin_hypercube
# Make a search grid for the k-parameter
knn_grid <- grid_latin_hypercube(
neighbors(c(3, 500)),
size = 100
)
knn_grid
plot(knn_grid)
# Make a search grid for the k-parameter
knn_grid <- grid_latin_hypercube(
neighbors(c(3, 500)),
size = 100
)
# Make a search grid for the k-parameter
knn_grid <- grid_latin_hypercube(
neighbors(c(3, nrow(telco)/5)),
size = 100
)
nrow(telco)
# Make a search grid for the k-parameter
knn_grid <- grid_latin_hypercube(
neighbors(c(3, round(nrow(telco)/5))),
size = 100
)
range(knn_grid)
litigation_split <- initial_split(telco, strata = Churn)
# Split the data into training and testing set
set.seed(1)
telco_split <- initial_split(telco, strata = Churn)
telco_train <- training(telco_split)
telco_test  <- testing (telco_split)
telco_folds <- vfold_cv(telco_train, strata = Churn)
telco_train
telco_ttest
telco_test
telco_folds
knn_tune_result <-
tune_grid(
knn_workflow,
resamples = telco_folds,
grid = knn_grid,
control = control_grid(save_pred = TRUE)
)
# Specify the model
knn_mod <-
nearest_neighbor(neighbors = tune()) %>%
set_mode("classification") %>%
set_engine("kknn") %>%
# Specify the recipe
knn_recipe <-
recipe(Churn ~ ., data = telco)
# Specify the recipe
knn_recipe <-
recipe(Churn ~ ., data = telco)
# Set up the workflow
knn_workflow <-
workflow() %>%
add_model(knn_mod) %>%
add_recipe(knn_recipe)
knn_tune_result <-
tune_grid(
knn_workflow,
resamples = telco_folds,
grid = knn_grid,
control = control_grid(save_pred = TRUE)
)
knn_tune_result
# Make a search grid for the k-parameter
knn_grid <- grid_latin_hypercube(
neighbors(c(3, round(nrow(telco)/5))),
size = 15
)
knn_tune_result <-
tune_grid(
knn_workflow,
resamples = telco_folds,
grid = knn_grid,
control = control_grid(save_pred = TRUE)
)
knn_tune_result
tr <-
knn_tune_result %>%
select_best(metric = "roc_auc")
tr
knn_tuned <-
finalize_workflow(
knn_workflow,
parameters = knn_tune_result %>% select_best(metric = "roc_auc")
)
knn_tuned
# Fit the model
knn_fit <-
knn_tuned %>%
fit(data = knn_train)
# Fit the model
knn_fit <-
knn_tuned %>%
fit(data = telco_train)
knn_fit %>%
predict(new_data = telco_test,
type = "prob")
knn_fit %>%
predict(new_data = telco_test,
type = "prob") %>%
mutate(truth = telco_test$Churn)
predictions_testing %>%
mutate(value = predictions_testing %>%
roc_auc(truth, .pred_Litigated) %>%
select(.estimate) %>%
pull)
# Predict the test data
predictions_testing <-
knn_fit %>%
predict(new_data = telco_test,
type = "prob") %>%
mutate(truth = telco_test$Churn)
predictions_testing %>%
mutate(value = predictions_testing %>%
roc_auc(truth, .pred_Litigated) %>%
select(.estimate) %>%
pull)
predictions_testing %>%
roc_auc(truth, .pred_Litigated)
predictions_testing %>%
roc_auc(truth, .pred_Yes)
?roc_auc
predictions_testing
predictions_testing %>%
roc_auc(truth = truth, .pred_Yes)
knn_tune_result
knn_tune_result$.metrics
# Which k is the best?
knn_tune_result %>%
select_best(metric = "roc_auc")
knn_tuned <-
finalize_workflow(
knn_workflow,
parameters = knn_tune_result %>% select_best(metric = "roc_auc")
)
# Fit the model
knn_fit <-
knn_tuned %>%
fit(data = telco_train)
predictions_testing <-
knn_fit %>%
predict(new_data = telco_test,
type = "prob") %>%
mutate(truth = telco_test$Churn)
predictions_testing
predictions_testing %>%
roc_auc(truth = truth, .pred_Yes)
predictions_testing %>%
roc_auc(truth = .$truth, .pred_Yes) %>%
select(.estimate) %>%
pull
predictions_testing %>%
roc_auc(.pred_Yes, truth = truth) %>%
select(.estimate) %>%
pull
predictions_testing %>%
roc_auc(.pred_Yes, truth) %>%
select(.estimate) %>%
pull
truth
predictions_testing %>%
roc_auc(truth = .$truth, .pred_Yes) %>%
select(.estimate) %>%
pull
predictions_testing %>%
roc_auc(truth = truth, .$.pred_Yes) %>%
select(.estimate) %>%
pull
predictions_testing %>%
roc_auc(truth = truth, estimate = .pred_Yes) %>%
select(.estimate) %>%
pull
predictions_testing %>%
roc_auc(truth = truth, estimate = .$.pred_Yes) %>%
select(.estimate) %>%
pull
predictions_testing %>%
roc_auc(truth = truth, estimate = .$.pred_Yes)
predictions_testing
predictions_testing %>%
roc_auc(truth, .pred_Yes) %>%
select(.estimate) %>%
pull
predictions_testing %>% ggplot(aes(x = .pred_Yes, y = truth)) + geom_point()
predictions_testing %>% ggplot(aes(x = .pred_Yes, y = truth)) + geom_point(alpha = .3)
predictions_testing %>% ggplot(aes(x = .pred_Yes, y = truth)) + geom_point(alpha = .1)
predictions_testing %>% ggplot(aes(x = .pred_Yes, y = truth)) + geom_point(alpha = .05)
predictions_testing %>%
roc_auc(truth, estimate = predictions_testing$.pred_Yes) %>%
select(.estimate) %>%
pull
predictions_testing$.pred_Yes
predictions_testing %>%
roc_auc(truth, .pred_Yes)
predictions_testing %>%
roc_auc(truth, .pred_No) %>%
select(.estimate) %>%
pull
# Predict the test data
predictions_testing <-
fitted_knn %>%
predict(new_data = telco_test,
type = "prob") %>%
mutate(truth = telco_test$Churn)
# Calculate the AUC
predictions_testing %>%
roc_auc(truth, .pred_No) %>%
select(.estimate) %>%
pull
# Calculate the AUC
predictions_testing %>%
roc_auc(truth, .pred_No)
# Draw the decision boundary
predictions <-
predictions %>%
mutate(pred_prob_knn = predict(fitted_knn,
new_data = newdata,
type = "prob")$.pred_Yes)
scatter +
geom_contour_filled(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_knn),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1)) +
scale_fill_manual(values = pred_color,
name="Predicted probability",
drop = FALSE) +
geom_contour(aes(x = MonthlyCharges,
y = tenure,
z = pred_prob_knn),
data = predictions,
inherit.aes = FALSE,
breaks = c(0, 0.5, 1),
colour = "black",
size = 1.5)
# Load packages -----
library(readr)
# Read data ------
read_csv("spambase/spambase.data")
# Read data ------
read_csv(spambase.names)
# Read data ------
read_csv("spambase.names")
# Read data ------
read_csv("spambase/spambase.names")
# Read data ------
read_csv("spambase/spambase.names", comment = "|")
# Read data ------
read_csv("spambase/spambase.names", skip = 32)
# Read data ------
read_csv("spambase/spambase.names", skip = 32, col_names = FALSE)
library(dplyr)
# Read data ------
read_csv("spambase/spambase.names",
skip = 32,
col_names = FALSE) %>%
separate(all_vars(),
sep = ":")
# Read data ------
read_csv("spambase/spambase.names",
skip = 32,
col_names = FALSE) %>%
separate(X1,
sep = ":")
# Read data ------
read_csv("spambase/spambase.names",
skip = 32,
col_names = FALSE) %>%
separate(X1,
into = c("name", "drop"),
sep = ":")
# Read data ------
read_csv("spambase/spambase.names",
skip = 32,
col_names = FALSE) %>%
separate(X1,
into = c("name", "drop"),
sep = ":") %>%
select(-drop)
read_csv("spambase/spambase.data")
read_csv("spambase/spambase.data", col_names = FALSE)
# Read data ------
read_csv("spambase/spambase.names",
skip = 32,
col_names = FALSE) %>%
separate(X1,
into = c("name", "drop"),
sep = ":") %>%
select(-drop) %>%
bind_rows(tibble(name = "spam"))
# Read data ------
names <-
read_csv("spambase/spambase.names",
skip = 32,
col_names = FALSE) %>%
separate(X1,
into = c("name", "drop"),
sep = ":") %>%
select(-drop) %>%
bind_rows(tibble(name = "spam"))
# Read data ------
names <-
read_csv("spambase/spambase.names",
skip = 32,
col_names = FALSE) %>%
separate(X1,
into = c("name", "drop"),
sep = ":") %>%
select(-drop) %>%
bind_rows(tibble(name = "spam")) %>%
pull
read_csv("spambase/spambase.data", col_names = names)
spam <- read_csv("spambase/spambase.data", col_names = names)
library(tidymodels)
